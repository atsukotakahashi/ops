#! /usr/bin/env python

from charon import deployment
from prettytable import PrettyTable
import argparse
import os.path
import sys


def op_create():
    depl = deployment.Deployment(
        args.state_file, create=True,
        nix_exprs=[os.path.abspath(x) for x in args.nix_exprs])
    depl.write_state()

    
def op_info():
    depl = deployment.Deployment(args.state_file)
    depl.evaluate()

    tbl = PrettyTable(["Name", "Status", "Type", "VM Id", "IP address"])
    for name in set(depl.definitions.keys()) | set(depl.machines.keys()):
        d = depl.definitions.get(name)
        m = depl.machines.get(name)
        tbl.add_row(
            [name,
             (("Up" if depl.configs_path == m.cur_configs_path else "Outdated") if m else "New") if d else "Obsolete",
             m.get_type() if m else d.get_type(), "", ""
             ])
    print tbl

    
def op_check():
    print "checking!"

    
def op_deploy():
    depl = deployment.Deployment(args.state_file)
    depl.deploy(dry_run=args.dry_run, build_only=args.build_only)

    
def op_destroy():
    print "destroying!"


# Set up the parser.
parser = argparse.ArgumentParser(description='NixOS cloud deployment tool')

parser.add_argument('--state', '-s', required=True, dest='state_file', metavar='FILE', help='path to state file')
parser.add_argument('--debug', dest='debug', action='store_true', help='enable debug output')
parser.add_argument('--version', action='version', version='Charon 0.1')

subparsers = parser.add_subparsers(help='sub-command help')

subparser = subparsers.add_parser('create', help='create a state file')
subparser.set_defaults(op=op_create)
subparser.add_argument('nix_exprs', nargs='+', metavar='NIX-FILE', help='Nix expression(s) defining the network')

subparser = subparsers.add_parser('info', help='show the state of the network')
subparser.set_defaults(op=op_info)

subparser = subparsers.add_parser('check', help='check the state of the machines in the network')
subparser.set_defaults(op=op_check)

subparser = subparsers.add_parser('deploy', help='deploy the network configuration')
subparser.set_defaults(op=op_deploy)
subparser.add_argument('--kill-obsolete', '-k', dest='kill_obsolete', action='store_true', help='kill obsolete virtual machines')
subparser.add_argument('--dry-run', dest='dry_run', action='store_true', help='show what would be done')
subparser.add_argument('--build-only', dest='build_only', action='store_true', help='build only; do not perform deployment actions')

subparser = subparsers.add_parser('destroy', help='destroy all virtual machines in the network')
subparser.set_defaults(op=op_destroy)


# Parse the command line and execute the desired operation.
args = parser.parse_args()
try:
    args.op()
except deployment.NixEvalError:
    print >> sys.stderr, "error: evaluation of the deployment model failed"
